{{#alpine}}
FROM alpine:3.20.0 as builder
{{/alpine}}
{{#ubuntu24}}
FROM ubuntu:24.04 as builder
{{/ubuntu24}}
{{#ubuntu20}}
FROM ubuntu:20.04 as builder
{{/ubuntu20}}

WORKDIR /build

# Dependencies

{{#alpine}}
RUN apk update
RUN apk add curl tar make build-base zlib-dev
RUN apk add cmake
RUN apk add ninja patch linux-headers perl pkgconfig go g++
RUN apk add xz automake autoconf libtool
{{/alpine}}
{{#ubuntu}}
RUN apt-get update && \
    apt-get install -y ninja-build cmake curl zlib1g-dev
RUN apt-get install -y autoconf automake autotools-dev pkg-config libtool
RUN apt-get install -y bzip2 xz-utils
RUN apt-get install -y g++ golang-go unzip patch
{{/ubuntu}}

#
# nghttp2
#

#ARG NGHTTP2_VERSION=1.54.0
ARG NGHTTP2_VERSION=1.62.1
ARG NGHTTP2_URL=https://github.com/nghttp2/nghttp2/releases/download/v${NGHTTP2_VERSION}/nghttp2-${NGHTTP2_VERSION}.tar.gz

# Download nghttp2 for HTTP/2.0 support.
RUN curl -o nghttp2-${NGHTTP2_VERSION}.tar.gz -L ${NGHTTP2_URL}
RUN tar xf nghttp2-${NGHTTP2_VERSION}.tar.gz

# Compile nghttp2
RUN cd nghttp2-${NGHTTP2_VERSION} && \
    ./configure --prefix=/build/nghttp2-${NGHTTP2_VERSION}/installed --with-pic --disable-shared && \
    make && make install

#
# libbrotli
#

# Download and compile libbrotli
ARG BROTLI_VERSION=1.0.9
#ARG BROTLI_VERSION=1.1.0 # Doesn't compile
RUN curl -L https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz -o brotli-${BROTLI_VERSION}.tar.gz && \
    tar xf brotli-${BROTLI_VERSION}.tar.gz
RUN cd brotli-${BROTLI_VERSION} && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed .. && \
    cmake --build . --config Release --target install

#
# BoringSSL
#

{{#ubuntu20}}
#ARG BORING_SSL_VERSION=fips-20230428 # Doesn't compile
#ARG BORING_SSL_VERSION=chromium-stable # Doesn't compile
#ARG BORING_SSL_VERSION=fips-20240407
ARG BORING_SSL_VERSION=fips-20220613
RUN curl -L https://github.com/google/boringssl/archive/refs/heads/${BORING_SSL_VERSION}.zip -o boringssl-${BORING_SSL_VERSION}.zip
RUN unzip boringssl-${BORING_SSL_VERSION}.zip
{{/ubuntu20}}
{{^ubuntu20}}
ARG BORING_SSL_VERSION=1b7fdbd9101dedc3e0aa3fcf4ff74eacddb34ecc
RUN curl -L https://github.com/google/boringssl/archive/${BORING_SSL_VERSION}.zip -o boringssl-${BORING_SSL_VERSION}.zip
RUN unzip boringssl-${BORING_SSL_VERSION}.zip
{{/ubuntu20}}

# Patch BoringSSL.
COPY patches/boringssl-${BORING_SSL_VERSION}-*.patch boringssl-${BORING_SSL_VERSION}/
RUN cd boringssl-${BORING_SSL_VERSION} && \
    for p in $(ls boringssl-${BORING_SSL_VERSION}-*.patch); do patch -p1 < $p; done

# Compile BoringSSL.
RUN cd boringssl-${BORING_SSL_VERSION} && \
    mkdir build && cd build && \
    CXX="g++" CC="gcc" \
    cmake  \
        -DCMAKE_C_FLAGS="-Wno-error=array-bounds -Wno-error=stringop-overflow" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_POSITION_INDEPENDENT_CODE=on \
        -GNinja .. && \
    ninja

# Fix the directory structure so that curl can compile against it.
# See https://everything.curl.dev/source/build/tls/boringssl
RUN mkdir boringssl-${BORING_SSL_VERSION}/build/lib && \
    ln -s ../crypto/libcrypto.a boringssl-${BORING_SSL_VERSION}/build/lib/libcrypto.a && \
    ln -s ../ssl/libssl.a boringssl-${BORING_SSL_VERSION}/build/lib/libssl.a && \
    cp -R boringssl-${BORING_SSL_VERSION}/include boringssl-${BORING_SSL_VERSION}/build

#
# Curl
#

#ARG CURL_VERSION=curl-7.84.0
#ARG CURL_VERSION=curl-7.85.0
#ARG CURL_VERSION=curl-7.86.0
#ARG CURL_VERSION=curl-7.87.0
#ARG CURL_VERSION=curl-7.88.1
#ARG CURL_VERSION=curl-8.1.1
ARG CURL_VERSION=curl-8.1.2
ARG CURL_URL=https://curl.se/download/${CURL_VERSION}.tar.xz

RUN curl -o ${CURL_VERSION}.tar.xz -L ${CURL_URL}
RUN tar -xf ${CURL_VERSION}.tar.xz

# Patch curl and re-generate the configure script
COPY patches/${CURL_VERSION}-*.patch ${CURL_VERSION}/
RUN cd ${CURL_VERSION} && \
    for p in $(ls ${CURL_VERSION}-*.patch); do patch -p1 < $p; done && \
    autoreconf -fi

# Compile curl with HTTP/2.0, Brotli, and BoringSSL support.
# Enable keylogfile for debugging of TLS traffic.
RUN cd ${CURL_VERSION} && \
    ./configure --prefix=/build/install \
                --enable-static \
                --disable-shared \
                --enable-websockets \
                --with-nghttp2=/build/nghttp2-${NGHTTP2_VERSION}/installed \
                --with-brotli=/build/brotli-${BROTLI_VERSION}/build/installed \
                --with-openssl=/build/boringssl-${BORING_SSL_VERSION}/build \
                LIBS="-pthread" \
                CFLAGS="-I/build/boringssl-${BORING_SSL_VERSION}/build" \
                USE_CURL_SSLKEYLOGFILE=true && \
    make && make install

RUN mkdir out && \
    cp /build/install/bin/curl-impersonate-chrome out/ && \
    ln -s curl-impersonate-chrome out/curl-impersonate && \
    ln -s curl-impersonate-chrome out/curl-chromium && \
    strip out/curl-impersonate-chrome

# Verify that the resulting 'curl' has all the necessary features.
RUN ./out/curl-impersonate-chrome -V | grep -q zlib && \
    ./out/curl-impersonate-chrome -V | grep -q brotli && \
    ./out/curl-impersonate-chrome -V | grep -q -e NSS -e BoringSSL && \
    ./out/curl-impersonate-chrome -V | grep -q nghttp2

# Verify that the resulting 'curl' is really statically compiled
RUN ! (ldd ./out/curl-impersonate-chrome | grep -q -e libcurl -e nghttp2 -e brotli -e ssl -e crypto)


RUN rm -Rf /build/install

# Re-compile libcurl dynamically
RUN cd ${CURL_VERSION} && \
    ./configure --prefix=/build/install \
                --enable-websockets \
                --with-nghttp2=/build/nghttp2-${NGHTTP2_VERSION}/installed \
                --with-brotli=/build/brotli-${BROTLI_VERSION}/build/installed \
                --with-openssl=/build/boringssl-${BORING_SSL_VERSION}/build \
                LIBS="-pthread" \
                CFLAGS="-I/build/boringssl-${BORING_SSL_VERSION}/build" \
                USE_CURL_SSLKEYLOGFILE=true && \
    make clean && make && make install

# Copy libcurl-chromium and symbolic links
RUN cp -d /build/install/lib/libcurl-impersonate* /build/out

RUN ver=$(readlink -f ${CURL_VERSION}/lib/.libs/libcurl-impersonate-chrome.so | sed 's/.*so\.//') && \
    major=$(echo -n $ver | cut -d'.' -f1) && \
    ln -s "libcurl-impersonate-chrome.so.$ver" "out/libcurl-impersonate.so.$ver" && \
    ln -s "libcurl-impersonate.so.$ver" "out/libcurl-impersonate.so" && \
    strip "out/libcurl-impersonate.so.$ver"

# Verify that the resulting 'libcurl' is really statically compiled against its
# dependencies.
RUN ! (ldd ./out/curl-impersonate | grep -q -e nghttp2 -e brotli -e ssl -e crypto)

# Wrapper scripts
COPY bin/curl_chrome* bin/curl_edge* bin/curl_safari* out/

{{#alpine}}
# Replace /usr/bin/env bash with /usr/bin/env ash
RUN sed -i 's@/usr/bin/env bash@/usr/bin/env ash@' out/curl_*
{{/alpine}}

RUN chmod +x out/curl_*

# Create a final, minimal image with the compiled binaries only.

{{#alpine}}
FROM alpine:3.20.0
{{/alpine}}
{{#ubuntu24}}
FROM ubuntu:24.04
{{/ubuntu24}}
{{#ubuntu20}}
FROM ubuntu:20.04
{{/ubuntu20}}

# Copy curl-chromium from the builder image
COPY --from=builder /build/install /usr/local
# Wrapper scripts
COPY --from=builder /build/out/curl* /usr/local/bin/